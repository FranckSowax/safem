const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const supabaseUrl = 'https://iwwgbmukenmxumfxibsz.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Iml3d2dibXVrZW5teHVtZnhpYnN6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI3Njk1MzEsImV4cCI6MjA2ODM0NTUzMX0.CXLQgcK_3F1Uq5z9zfhxfndx_WM7ZLBZc8gfVNdiMO4';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testRealtimeFinal() {
  console.log('üöÄ TEST FINAL - Dashboard SAFEM avec Realtime');
  console.log('‚è∞ Heure actuelle:', new Date().toLocaleString('fr-FR'));
  
  // 1. Statistiques initiales
  console.log('\nüìä 1. Statistiques initiales...');
  
  const { data: initialSales, error: initialError } = await supabase
    .from('sales')
    .select('total_amount')
    .gte('sale_date', new Date().toISOString().split('T')[0]);
  
  if (initialError) {
    console.error('‚ùå Erreur:', initialError);
    return;
  }
  
  const initialRevenue = initialSales.reduce((sum, sale) => sum + parseFloat(sale.total_amount), 0);
  const initialCount = initialSales.length;
  
  console.log(`üí∞ Chiffre d'affaires initial: ${initialRevenue.toLocaleString('fr-FR')} FCFA`);
  console.log(`üìà Nombre de ventes initial: ${initialCount}`);
  
  // 2. Configuration Realtime
  console.log('\nüì° 2. Configuration Realtime...');
  
  let realtimeEvents = [];
  
  const channel = supabase
    .channel('sales-realtime-test')
    .on('postgres_changes', 
      { event: 'INSERT', schema: 'public', table: 'sales' },
      (payload) => {
        console.log('üì° [REALTIME] Nouvelle vente d√©tect√©e:', {
          id: payload.new.id,
          client: payload.new.client_name,
          total: payload.new.total_amount + ' FCFA',
          timestamp: new Date().toLocaleString('fr-FR')
        });
        realtimeEvents.push(payload);
      }
    )
    .on('postgres_changes', 
      { event: 'INSERT', schema: 'public', table: 'sale_items' },
      (payload) => {
        console.log('üì¶ [REALTIME] Nouvel article de vente:', {
          sale_id: payload.new.sale_id,
          product_id: payload.new.product_id,
          quantity: payload.new.quantity,
          total: payload.new.total_price + ' FCFA'
        });
      }
    )
    .subscribe((status) => {
      console.log('üì° Status Realtime:', status);
      
      if (status === 'SUBSCRIBED') {
        console.log('‚úÖ Realtime activ√© avec succ√®s !');
        
        // 3. Cr√©er une vente de test apr√®s activation
        setTimeout(async () => {
          console.log('\nüõçÔ∏è 3. Cr√©ation d\'une vente de test...');
          
          const testSale = {
            client_name: `Test Realtime Final ${Date.now()}`,
            client_phone: '+241 06 77 88 99',
            total_amount: 12500,
            payment_method: 'cash',
            sale_date: new Date().toISOString().split('T')[0],
            status: 'completed'
          };
          
          const { data: newSale, error: saleError } = await supabase
            .from('sales')
            .insert(testSale)
            .select()
            .single();
          
          if (saleError) {
            console.error('‚ùå Erreur lors de la cr√©ation de la vente:', saleError);
            return;
          }
          
          console.log('‚úÖ Vente cr√©√©e:', {
            id: newSale.id,
            client: newSale.client_name,
            total: newSale.total_amount + ' FCFA'
          });
          
          // Ajouter des articles √† la vente
          const saleItems = [
            {
              sale_id: newSale.id,
              product_id: '11111111-1111-1111-1111-111111111111', // Poivron De conti
              quantity: 3,
              unit_price: 2250,
              total_price: 6750
            },
            {
              sale_id: newSale.id,
              product_id: '22222222-2222-2222-2222-222222222222', // Tomate Padma
              quantity: 2,
              unit_price: 1500,
              total_price: 3000
            },
            {
              sale_id: newSale.id,
              product_id: '33333333-3333-3333-3333-333333333333', // Piment Demon
              quantity: 1,
              unit_price: 2750,
              total_price: 2750
            }
          ];
          
          const { data: items, error: itemsError } = await supabase
            .from('sale_items')
            .insert(saleItems);
          
          if (itemsError) {
            console.error('‚ùå Erreur lors de l\'ajout des articles:', itemsError);
          } else {
            console.log(`‚úÖ ${saleItems.length} articles ajout√©s √† la vente`);
          }
          
          // 4. V√©rifier la synchronisation apr√®s 3 secondes
          setTimeout(async () => {
            console.log('\nüìä 4. V√©rification de la synchronisation...');
            
            const { data: finalSales, error: finalError } = await supabase
              .from('sales')
              .select('total_amount')
              .gte('sale_date', new Date().toISOString().split('T')[0]);
            
            if (finalError) {
              console.error('‚ùå Erreur:', finalError);
              return;
            }
            
            const finalRevenue = finalSales.reduce((sum, sale) => sum + parseFloat(sale.total_amount), 0);
            const finalCount = finalSales.length;
            
            console.log(`üí∞ Chiffre d'affaires final: ${finalRevenue.toLocaleString('fr-FR')} FCFA`);
            console.log(`üìà Nombre de ventes final: ${finalCount}`);
            
            const revenueIncrease = finalRevenue - initialRevenue;
            const countIncrease = finalCount - initialCount;
            
            console.log('\nüìà √âVOLUTION:');
            console.log(`üí∞ Revenus: +${revenueIncrease.toLocaleString('fr-FR')} FCFA`);
            console.log(`üìä Ventes: +${countIncrease}`);
            
            // 5. V√©rifier les √©v√©nements Realtime
            console.log('\nüì° 5. V√©rification des √©v√©nements Realtime...');
            console.log(`üì° √âv√©nements re√ßus: ${realtimeEvents.length}`);
            
            if (realtimeEvents.length > 0) {
              console.log('‚úÖ Realtime fonctionne correctement !');
              realtimeEvents.forEach((event, index) => {
                console.log(`   Event ${index + 1}: ${event.new.client_name} - ${event.new.total_amount} FCFA`);
              });
            } else {
              console.log('‚ö†Ô∏è  Aucun √©v√©nement Realtime re√ßu');
              console.log('üí° V√©rifiez que Realtime est activ√© dans les param√®tres Supabase');
            }
            
            // 6. Instructions finales
            console.log('\nüéØ 6. INSTRUCTIONS FINALES:');
            console.log('');
            console.log('‚úÖ CORRECTIONS APPLIQU√âES:');
            console.log('   - SalesModule corrig√© avec props s√©curis√©es');
            console.log('   - Optional chaining ajout√© partout');
            console.log('   - Transformation des donn√©es robuste');
            console.log('   - Realtime activ√© dans useDashboard.js');
            console.log('');
            console.log('üöÄ POUR TESTER LE DASHBOARD:');
            console.log('   1. Ouvrez http://localhost:3001');
            console.log('   2. Naviguez vers l\'onglet "Ventes"');
            console.log('   3. Ouvrez la console d√©veloppeur (F12)');
            console.log('   4. V√©rifiez qu\'il n\'y a plus d\'erreurs');
            console.log('   5. Les mises √† jour devraient √™tre instantan√©es');
            console.log('');
            console.log('üì° REALTIME STATUS:');
            if (realtimeEvents.length > 0) {
              console.log('   ‚úÖ Realtime ACTIV√â et fonctionnel');
              console.log('   ‚úÖ Mises √† jour instantan√©es');
              console.log('   ‚úÖ Synchronisation parfaite');
            } else {
              console.log('   ‚ö†Ô∏è  Realtime configur√© mais pas d\'√©v√©nements');
              console.log('   üí° Le polling de secours (30s) est actif');
            }
            console.log('');
            console.log('üéâ DASHBOARD SAFEM PR√äT √Ä L\'UTILISATION !');
            
            // Fermer le canal
            channel.unsubscribe();
            
          }, 3000);
          
        }, 2000);
        
      } else if (status === 'CHANNEL_ERROR') {
        console.log('‚ùå Erreur de connexion Realtime');
        console.log('üí° Le dashboard utilisera le polling de secours');
      }
    });
}

if (require.main === module) {
  testRealtimeFinal();
}

module.exports = { testRealtimeFinal };
